/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StaticLinkCenterService_H
#define StaticLinkCenterService_H

#include <thrift/TDispatchProcessor.h>
#include "octopus_crawler_types.h"



class StaticLinkCenterServiceIf {
 public:
  virtual ~StaticLinkCenterServiceIf() {}
  virtual void load_db_task(const int32_t task_id, const bool is_add_task) = 0;
  virtual void unload_db_task(const int32_t task_id) = 0;
  virtual void load_mongodb_task(const int32_t task_id, const bool is_add_task) = 0;
  virtual void get_link_task(std::vector<DownloadTask> & _return, const std::string& node_id) = 0;
  virtual void get_link_task_list(ListDownloadTask& _return, const std::string& node_id) = 0;
  virtual bool upload_link_task(const std::vector<DownloadTask> & upload_task_list, const std::string& node_id) = 0;
  virtual int32_t reload_config(const std::string& config_file) = 0;
};

class StaticLinkCenterServiceIfFactory {
 public:
  typedef StaticLinkCenterServiceIf Handler;

  virtual ~StaticLinkCenterServiceIfFactory() {}

  virtual StaticLinkCenterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StaticLinkCenterServiceIf* /* handler */) = 0;
};

class StaticLinkCenterServiceIfSingletonFactory : virtual public StaticLinkCenterServiceIfFactory {
 public:
  StaticLinkCenterServiceIfSingletonFactory(const boost::shared_ptr<StaticLinkCenterServiceIf>& iface) : iface_(iface) {}
  virtual ~StaticLinkCenterServiceIfSingletonFactory() {}

  virtual StaticLinkCenterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StaticLinkCenterServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<StaticLinkCenterServiceIf> iface_;
};

class StaticLinkCenterServiceNull : virtual public StaticLinkCenterServiceIf {
 public:
  virtual ~StaticLinkCenterServiceNull() {}
  void load_db_task(const int32_t /* task_id */, const bool /* is_add_task */) {
    return;
  }
  void unload_db_task(const int32_t /* task_id */) {
    return;
  }
  void load_mongodb_task(const int32_t /* task_id */, const bool /* is_add_task */) {
    return;
  }
  void get_link_task(std::vector<DownloadTask> & /* _return */, const std::string& /* node_id */) {
    return;
  }
  void get_link_task_list(ListDownloadTask& /* _return */, const std::string& /* node_id */) {
    return;
  }
  bool upload_link_task(const std::vector<DownloadTask> & /* upload_task_list */, const std::string& /* node_id */) {
    bool _return = false;
    return _return;
  }
  int32_t reload_config(const std::string& /* config_file */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _StaticLinkCenterService_load_db_task_args__isset {
  _StaticLinkCenterService_load_db_task_args__isset() : task_id(false), is_add_task(false) {}
  bool task_id;
  bool is_add_task;
} _StaticLinkCenterService_load_db_task_args__isset;

class StaticLinkCenterService_load_db_task_args {
 public:

  StaticLinkCenterService_load_db_task_args() : task_id(0), is_add_task(0) {
  }

  virtual ~StaticLinkCenterService_load_db_task_args() throw() {}

  int32_t task_id;
  bool is_add_task;

  _StaticLinkCenterService_load_db_task_args__isset __isset;

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  void __set_is_add_task(const bool val) {
    is_add_task = val;
  }

  bool operator == (const StaticLinkCenterService_load_db_task_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(is_add_task == rhs.is_add_task))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_load_db_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_load_db_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_load_db_task_pargs {
 public:


  virtual ~StaticLinkCenterService_load_db_task_pargs() throw() {}

  const int32_t* task_id;
  const bool* is_add_task;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_load_db_task_result {
 public:

  StaticLinkCenterService_load_db_task_result() {
  }

  virtual ~StaticLinkCenterService_load_db_task_result() throw() {}


  bool operator == (const StaticLinkCenterService_load_db_task_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StaticLinkCenterService_load_db_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_load_db_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_load_db_task_presult {
 public:


  virtual ~StaticLinkCenterService_load_db_task_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StaticLinkCenterService_unload_db_task_args__isset {
  _StaticLinkCenterService_unload_db_task_args__isset() : task_id(false) {}
  bool task_id;
} _StaticLinkCenterService_unload_db_task_args__isset;

class StaticLinkCenterService_unload_db_task_args {
 public:

  StaticLinkCenterService_unload_db_task_args() : task_id(0) {
  }

  virtual ~StaticLinkCenterService_unload_db_task_args() throw() {}

  int32_t task_id;

  _StaticLinkCenterService_unload_db_task_args__isset __isset;

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  bool operator == (const StaticLinkCenterService_unload_db_task_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_unload_db_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_unload_db_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_unload_db_task_pargs {
 public:


  virtual ~StaticLinkCenterService_unload_db_task_pargs() throw() {}

  const int32_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_unload_db_task_result {
 public:

  StaticLinkCenterService_unload_db_task_result() {
  }

  virtual ~StaticLinkCenterService_unload_db_task_result() throw() {}


  bool operator == (const StaticLinkCenterService_unload_db_task_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StaticLinkCenterService_unload_db_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_unload_db_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_unload_db_task_presult {
 public:


  virtual ~StaticLinkCenterService_unload_db_task_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StaticLinkCenterService_load_mongodb_task_args__isset {
  _StaticLinkCenterService_load_mongodb_task_args__isset() : task_id(false), is_add_task(false) {}
  bool task_id;
  bool is_add_task;
} _StaticLinkCenterService_load_mongodb_task_args__isset;

class StaticLinkCenterService_load_mongodb_task_args {
 public:

  StaticLinkCenterService_load_mongodb_task_args() : task_id(0), is_add_task(0) {
  }

  virtual ~StaticLinkCenterService_load_mongodb_task_args() throw() {}

  int32_t task_id;
  bool is_add_task;

  _StaticLinkCenterService_load_mongodb_task_args__isset __isset;

  void __set_task_id(const int32_t val) {
    task_id = val;
  }

  void __set_is_add_task(const bool val) {
    is_add_task = val;
  }

  bool operator == (const StaticLinkCenterService_load_mongodb_task_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    if (!(is_add_task == rhs.is_add_task))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_load_mongodb_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_load_mongodb_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_load_mongodb_task_pargs {
 public:


  virtual ~StaticLinkCenterService_load_mongodb_task_pargs() throw() {}

  const int32_t* task_id;
  const bool* is_add_task;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_load_mongodb_task_result {
 public:

  StaticLinkCenterService_load_mongodb_task_result() {
  }

  virtual ~StaticLinkCenterService_load_mongodb_task_result() throw() {}


  bool operator == (const StaticLinkCenterService_load_mongodb_task_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StaticLinkCenterService_load_mongodb_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_load_mongodb_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_load_mongodb_task_presult {
 public:


  virtual ~StaticLinkCenterService_load_mongodb_task_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StaticLinkCenterService_get_link_task_args__isset {
  _StaticLinkCenterService_get_link_task_args__isset() : node_id(false) {}
  bool node_id;
} _StaticLinkCenterService_get_link_task_args__isset;

class StaticLinkCenterService_get_link_task_args {
 public:

  StaticLinkCenterService_get_link_task_args() : node_id() {
  }

  virtual ~StaticLinkCenterService_get_link_task_args() throw() {}

  std::string node_id;

  _StaticLinkCenterService_get_link_task_args__isset __isset;

  void __set_node_id(const std::string& val) {
    node_id = val;
  }

  bool operator == (const StaticLinkCenterService_get_link_task_args & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_get_link_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_get_link_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_get_link_task_pargs {
 public:


  virtual ~StaticLinkCenterService_get_link_task_pargs() throw() {}

  const std::string* node_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_get_link_task_result__isset {
  _StaticLinkCenterService_get_link_task_result__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_get_link_task_result__isset;

class StaticLinkCenterService_get_link_task_result {
 public:

  StaticLinkCenterService_get_link_task_result() {
  }

  virtual ~StaticLinkCenterService_get_link_task_result() throw() {}

  std::vector<DownloadTask>  success;

  _StaticLinkCenterService_get_link_task_result__isset __isset;

  void __set_success(const std::vector<DownloadTask> & val) {
    success = val;
  }

  bool operator == (const StaticLinkCenterService_get_link_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_get_link_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_get_link_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_get_link_task_presult__isset {
  _StaticLinkCenterService_get_link_task_presult__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_get_link_task_presult__isset;

class StaticLinkCenterService_get_link_task_presult {
 public:


  virtual ~StaticLinkCenterService_get_link_task_presult() throw() {}

  std::vector<DownloadTask> * success;

  _StaticLinkCenterService_get_link_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StaticLinkCenterService_get_link_task_list_args__isset {
  _StaticLinkCenterService_get_link_task_list_args__isset() : node_id(false) {}
  bool node_id;
} _StaticLinkCenterService_get_link_task_list_args__isset;

class StaticLinkCenterService_get_link_task_list_args {
 public:

  StaticLinkCenterService_get_link_task_list_args() : node_id() {
  }

  virtual ~StaticLinkCenterService_get_link_task_list_args() throw() {}

  std::string node_id;

  _StaticLinkCenterService_get_link_task_list_args__isset __isset;

  void __set_node_id(const std::string& val) {
    node_id = val;
  }

  bool operator == (const StaticLinkCenterService_get_link_task_list_args & rhs) const
  {
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_get_link_task_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_get_link_task_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_get_link_task_list_pargs {
 public:


  virtual ~StaticLinkCenterService_get_link_task_list_pargs() throw() {}

  const std::string* node_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_get_link_task_list_result__isset {
  _StaticLinkCenterService_get_link_task_list_result__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_get_link_task_list_result__isset;

class StaticLinkCenterService_get_link_task_list_result {
 public:

  StaticLinkCenterService_get_link_task_list_result() {
  }

  virtual ~StaticLinkCenterService_get_link_task_list_result() throw() {}

  ListDownloadTask success;

  _StaticLinkCenterService_get_link_task_list_result__isset __isset;

  void __set_success(const ListDownloadTask& val) {
    success = val;
  }

  bool operator == (const StaticLinkCenterService_get_link_task_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_get_link_task_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_get_link_task_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_get_link_task_list_presult__isset {
  _StaticLinkCenterService_get_link_task_list_presult__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_get_link_task_list_presult__isset;

class StaticLinkCenterService_get_link_task_list_presult {
 public:


  virtual ~StaticLinkCenterService_get_link_task_list_presult() throw() {}

  ListDownloadTask* success;

  _StaticLinkCenterService_get_link_task_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StaticLinkCenterService_upload_link_task_args__isset {
  _StaticLinkCenterService_upload_link_task_args__isset() : upload_task_list(false), node_id(false) {}
  bool upload_task_list;
  bool node_id;
} _StaticLinkCenterService_upload_link_task_args__isset;

class StaticLinkCenterService_upload_link_task_args {
 public:

  StaticLinkCenterService_upload_link_task_args() : node_id() {
  }

  virtual ~StaticLinkCenterService_upload_link_task_args() throw() {}

  std::vector<DownloadTask>  upload_task_list;
  std::string node_id;

  _StaticLinkCenterService_upload_link_task_args__isset __isset;

  void __set_upload_task_list(const std::vector<DownloadTask> & val) {
    upload_task_list = val;
  }

  void __set_node_id(const std::string& val) {
    node_id = val;
  }

  bool operator == (const StaticLinkCenterService_upload_link_task_args & rhs) const
  {
    if (!(upload_task_list == rhs.upload_task_list))
      return false;
    if (!(node_id == rhs.node_id))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_upload_link_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_upload_link_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_upload_link_task_pargs {
 public:


  virtual ~StaticLinkCenterService_upload_link_task_pargs() throw() {}

  const std::vector<DownloadTask> * upload_task_list;
  const std::string* node_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_upload_link_task_result__isset {
  _StaticLinkCenterService_upload_link_task_result__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_upload_link_task_result__isset;

class StaticLinkCenterService_upload_link_task_result {
 public:

  StaticLinkCenterService_upload_link_task_result() : success(0) {
  }

  virtual ~StaticLinkCenterService_upload_link_task_result() throw() {}

  bool success;

  _StaticLinkCenterService_upload_link_task_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const StaticLinkCenterService_upload_link_task_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_upload_link_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_upload_link_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_upload_link_task_presult__isset {
  _StaticLinkCenterService_upload_link_task_presult__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_upload_link_task_presult__isset;

class StaticLinkCenterService_upload_link_task_presult {
 public:


  virtual ~StaticLinkCenterService_upload_link_task_presult() throw() {}

  bool* success;

  _StaticLinkCenterService_upload_link_task_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StaticLinkCenterService_reload_config_args__isset {
  _StaticLinkCenterService_reload_config_args__isset() : config_file(false) {}
  bool config_file;
} _StaticLinkCenterService_reload_config_args__isset;

class StaticLinkCenterService_reload_config_args {
 public:

  StaticLinkCenterService_reload_config_args() : config_file() {
  }

  virtual ~StaticLinkCenterService_reload_config_args() throw() {}

  std::string config_file;

  _StaticLinkCenterService_reload_config_args__isset __isset;

  void __set_config_file(const std::string& val) {
    config_file = val;
  }

  bool operator == (const StaticLinkCenterService_reload_config_args & rhs) const
  {
    if (!(config_file == rhs.config_file))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_reload_config_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_reload_config_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StaticLinkCenterService_reload_config_pargs {
 public:


  virtual ~StaticLinkCenterService_reload_config_pargs() throw() {}

  const std::string* config_file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_reload_config_result__isset {
  _StaticLinkCenterService_reload_config_result__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_reload_config_result__isset;

class StaticLinkCenterService_reload_config_result {
 public:

  StaticLinkCenterService_reload_config_result() : success(0) {
  }

  virtual ~StaticLinkCenterService_reload_config_result() throw() {}

  int32_t success;

  _StaticLinkCenterService_reload_config_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const StaticLinkCenterService_reload_config_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StaticLinkCenterService_reload_config_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StaticLinkCenterService_reload_config_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StaticLinkCenterService_reload_config_presult__isset {
  _StaticLinkCenterService_reload_config_presult__isset() : success(false) {}
  bool success;
} _StaticLinkCenterService_reload_config_presult__isset;

class StaticLinkCenterService_reload_config_presult {
 public:


  virtual ~StaticLinkCenterService_reload_config_presult() throw() {}

  int32_t* success;

  _StaticLinkCenterService_reload_config_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StaticLinkCenterServiceClient : virtual public StaticLinkCenterServiceIf {
 public:
  StaticLinkCenterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  StaticLinkCenterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void load_db_task(const int32_t task_id, const bool is_add_task);
  void send_load_db_task(const int32_t task_id, const bool is_add_task);
  void recv_load_db_task();
  void unload_db_task(const int32_t task_id);
  void send_unload_db_task(const int32_t task_id);
  void recv_unload_db_task();
  void load_mongodb_task(const int32_t task_id, const bool is_add_task);
  void send_load_mongodb_task(const int32_t task_id, const bool is_add_task);
  void recv_load_mongodb_task();
  void get_link_task(std::vector<DownloadTask> & _return, const std::string& node_id);
  void send_get_link_task(const std::string& node_id);
  void recv_get_link_task(std::vector<DownloadTask> & _return);
  void get_link_task_list(ListDownloadTask& _return, const std::string& node_id);
  void send_get_link_task_list(const std::string& node_id);
  void recv_get_link_task_list(ListDownloadTask& _return);
  bool upload_link_task(const std::vector<DownloadTask> & upload_task_list, const std::string& node_id);
  void send_upload_link_task(const std::vector<DownloadTask> & upload_task_list, const std::string& node_id);
  bool recv_upload_link_task();
  int32_t reload_config(const std::string& config_file);
  void send_reload_config(const std::string& config_file);
  int32_t recv_reload_config();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StaticLinkCenterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<StaticLinkCenterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StaticLinkCenterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_load_db_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unload_db_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_mongodb_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_link_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_link_task_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_link_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reload_config(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StaticLinkCenterServiceProcessor(boost::shared_ptr<StaticLinkCenterServiceIf> iface) :
    iface_(iface) {
    processMap_["load_db_task"] = &StaticLinkCenterServiceProcessor::process_load_db_task;
    processMap_["unload_db_task"] = &StaticLinkCenterServiceProcessor::process_unload_db_task;
    processMap_["load_mongodb_task"] = &StaticLinkCenterServiceProcessor::process_load_mongodb_task;
    processMap_["get_link_task"] = &StaticLinkCenterServiceProcessor::process_get_link_task;
    processMap_["get_link_task_list"] = &StaticLinkCenterServiceProcessor::process_get_link_task_list;
    processMap_["upload_link_task"] = &StaticLinkCenterServiceProcessor::process_upload_link_task;
    processMap_["reload_config"] = &StaticLinkCenterServiceProcessor::process_reload_config;
  }

  virtual ~StaticLinkCenterServiceProcessor() {}
};

class StaticLinkCenterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StaticLinkCenterServiceProcessorFactory(const ::boost::shared_ptr< StaticLinkCenterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StaticLinkCenterServiceIfFactory > handlerFactory_;
};

class StaticLinkCenterServiceMultiface : virtual public StaticLinkCenterServiceIf {
 public:
  StaticLinkCenterServiceMultiface(std::vector<boost::shared_ptr<StaticLinkCenterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StaticLinkCenterServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StaticLinkCenterServiceIf> > ifaces_;
  StaticLinkCenterServiceMultiface() {}
  void add(boost::shared_ptr<StaticLinkCenterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void load_db_task(const int32_t task_id, const bool is_add_task) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_db_task(task_id, is_add_task);
    }
    ifaces_[i]->load_db_task(task_id, is_add_task);
  }

  void unload_db_task(const int32_t task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unload_db_task(task_id);
    }
    ifaces_[i]->unload_db_task(task_id);
  }

  void load_mongodb_task(const int32_t task_id, const bool is_add_task) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_mongodb_task(task_id, is_add_task);
    }
    ifaces_[i]->load_mongodb_task(task_id, is_add_task);
  }

  void get_link_task(std::vector<DownloadTask> & _return, const std::string& node_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_link_task(_return, node_id);
    }
    ifaces_[i]->get_link_task(_return, node_id);
    return;
  }

  void get_link_task_list(ListDownloadTask& _return, const std::string& node_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_link_task_list(_return, node_id);
    }
    ifaces_[i]->get_link_task_list(_return, node_id);
    return;
  }

  bool upload_link_task(const std::vector<DownloadTask> & upload_task_list, const std::string& node_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_link_task(upload_task_list, node_id);
    }
    return ifaces_[i]->upload_link_task(upload_task_list, node_id);
  }

  int32_t reload_config(const std::string& config_file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reload_config(config_file);
    }
    return ifaces_[i]->reload_config(config_file);
  }

};



#endif

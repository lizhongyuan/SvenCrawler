/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExtractorService_H
#define ExtractorService_H

#include <thrift/TDispatchProcessor.h>
#include "octopus_crawler_types.h"



class ExtractorServiceIf {
 public:
  virtual ~ExtractorServiceIf() {}
  virtual int32_t load_template(const std::string& url_template, const TemplateType::type template_type) = 0;
  virtual void unload_template(const std::string& url_template, const TemplateType::type template_type) = 0;
  virtual void extract_sync(MatchedResultItem& _return, const ExtractItem& extract_item) = 0;
  virtual void upload_extract_task(const ExtractItem& extract_task) = 0;
};

class ExtractorServiceIfFactory {
 public:
  typedef ExtractorServiceIf Handler;

  virtual ~ExtractorServiceIfFactory() {}

  virtual ExtractorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExtractorServiceIf* /* handler */) = 0;
};

class ExtractorServiceIfSingletonFactory : virtual public ExtractorServiceIfFactory {
 public:
  ExtractorServiceIfSingletonFactory(const boost::shared_ptr<ExtractorServiceIf>& iface) : iface_(iface) {}
  virtual ~ExtractorServiceIfSingletonFactory() {}

  virtual ExtractorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExtractorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ExtractorServiceIf> iface_;
};

class ExtractorServiceNull : virtual public ExtractorServiceIf {
 public:
  virtual ~ExtractorServiceNull() {}
  int32_t load_template(const std::string& /* url_template */, const TemplateType::type /* template_type */) {
    int32_t _return = 0;
    return _return;
  }
  void unload_template(const std::string& /* url_template */, const TemplateType::type /* template_type */) {
    return;
  }
  void extract_sync(MatchedResultItem& /* _return */, const ExtractItem& /* extract_item */) {
    return;
  }
  void upload_extract_task(const ExtractItem& /* extract_task */) {
    return;
  }
};

typedef struct _ExtractorService_load_template_args__isset {
  _ExtractorService_load_template_args__isset() : url_template(false), template_type(false) {}
  bool url_template;
  bool template_type;
} _ExtractorService_load_template_args__isset;

class ExtractorService_load_template_args {
 public:

  ExtractorService_load_template_args() : url_template(), template_type((TemplateType::type)0) {
  }

  virtual ~ExtractorService_load_template_args() throw() {}

  std::string url_template;
  TemplateType::type template_type;

  _ExtractorService_load_template_args__isset __isset;

  void __set_url_template(const std::string& val) {
    url_template = val;
  }

  void __set_template_type(const TemplateType::type val) {
    template_type = val;
  }

  bool operator == (const ExtractorService_load_template_args & rhs) const
  {
    if (!(url_template == rhs.url_template))
      return false;
    if (!(template_type == rhs.template_type))
      return false;
    return true;
  }
  bool operator != (const ExtractorService_load_template_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_load_template_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_load_template_pargs {
 public:


  virtual ~ExtractorService_load_template_pargs() throw() {}

  const std::string* url_template;
  const TemplateType::type* template_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtractorService_load_template_result__isset {
  _ExtractorService_load_template_result__isset() : success(false) {}
  bool success;
} _ExtractorService_load_template_result__isset;

class ExtractorService_load_template_result {
 public:

  ExtractorService_load_template_result() : success(0) {
  }

  virtual ~ExtractorService_load_template_result() throw() {}

  int32_t success;

  _ExtractorService_load_template_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ExtractorService_load_template_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExtractorService_load_template_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_load_template_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtractorService_load_template_presult__isset {
  _ExtractorService_load_template_presult__isset() : success(false) {}
  bool success;
} _ExtractorService_load_template_presult__isset;

class ExtractorService_load_template_presult {
 public:


  virtual ~ExtractorService_load_template_presult() throw() {}

  int32_t* success;

  _ExtractorService_load_template_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ExtractorService_unload_template_args__isset {
  _ExtractorService_unload_template_args__isset() : url_template(false), template_type(false) {}
  bool url_template;
  bool template_type;
} _ExtractorService_unload_template_args__isset;

class ExtractorService_unload_template_args {
 public:

  ExtractorService_unload_template_args() : url_template(), template_type((TemplateType::type)0) {
  }

  virtual ~ExtractorService_unload_template_args() throw() {}

  std::string url_template;
  TemplateType::type template_type;

  _ExtractorService_unload_template_args__isset __isset;

  void __set_url_template(const std::string& val) {
    url_template = val;
  }

  void __set_template_type(const TemplateType::type val) {
    template_type = val;
  }

  bool operator == (const ExtractorService_unload_template_args & rhs) const
  {
    if (!(url_template == rhs.url_template))
      return false;
    if (!(template_type == rhs.template_type))
      return false;
    return true;
  }
  bool operator != (const ExtractorService_unload_template_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_unload_template_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_unload_template_pargs {
 public:


  virtual ~ExtractorService_unload_template_pargs() throw() {}

  const std::string* url_template;
  const TemplateType::type* template_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_unload_template_result {
 public:

  ExtractorService_unload_template_result() {
  }

  virtual ~ExtractorService_unload_template_result() throw() {}


  bool operator == (const ExtractorService_unload_template_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtractorService_unload_template_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_unload_template_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_unload_template_presult {
 public:


  virtual ~ExtractorService_unload_template_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ExtractorService_extract_sync_args__isset {
  _ExtractorService_extract_sync_args__isset() : extract_item(false) {}
  bool extract_item;
} _ExtractorService_extract_sync_args__isset;

class ExtractorService_extract_sync_args {
 public:

  ExtractorService_extract_sync_args() {
  }

  virtual ~ExtractorService_extract_sync_args() throw() {}

  ExtractItem extract_item;

  _ExtractorService_extract_sync_args__isset __isset;

  void __set_extract_item(const ExtractItem& val) {
    extract_item = val;
  }

  bool operator == (const ExtractorService_extract_sync_args & rhs) const
  {
    if (!(extract_item == rhs.extract_item))
      return false;
    return true;
  }
  bool operator != (const ExtractorService_extract_sync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_extract_sync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_extract_sync_pargs {
 public:


  virtual ~ExtractorService_extract_sync_pargs() throw() {}

  const ExtractItem* extract_item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtractorService_extract_sync_result__isset {
  _ExtractorService_extract_sync_result__isset() : success(false) {}
  bool success;
} _ExtractorService_extract_sync_result__isset;

class ExtractorService_extract_sync_result {
 public:

  ExtractorService_extract_sync_result() {
  }

  virtual ~ExtractorService_extract_sync_result() throw() {}

  MatchedResultItem success;

  _ExtractorService_extract_sync_result__isset __isset;

  void __set_success(const MatchedResultItem& val) {
    success = val;
  }

  bool operator == (const ExtractorService_extract_sync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExtractorService_extract_sync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_extract_sync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExtractorService_extract_sync_presult__isset {
  _ExtractorService_extract_sync_presult__isset() : success(false) {}
  bool success;
} _ExtractorService_extract_sync_presult__isset;

class ExtractorService_extract_sync_presult {
 public:


  virtual ~ExtractorService_extract_sync_presult() throw() {}

  MatchedResultItem* success;

  _ExtractorService_extract_sync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ExtractorService_upload_extract_task_args__isset {
  _ExtractorService_upload_extract_task_args__isset() : extract_task(false) {}
  bool extract_task;
} _ExtractorService_upload_extract_task_args__isset;

class ExtractorService_upload_extract_task_args {
 public:

  ExtractorService_upload_extract_task_args() {
  }

  virtual ~ExtractorService_upload_extract_task_args() throw() {}

  ExtractItem extract_task;

  _ExtractorService_upload_extract_task_args__isset __isset;

  void __set_extract_task(const ExtractItem& val) {
    extract_task = val;
  }

  bool operator == (const ExtractorService_upload_extract_task_args & rhs) const
  {
    if (!(extract_task == rhs.extract_task))
      return false;
    return true;
  }
  bool operator != (const ExtractorService_upload_extract_task_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_upload_extract_task_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_upload_extract_task_pargs {
 public:


  virtual ~ExtractorService_upload_extract_task_pargs() throw() {}

  const ExtractItem* extract_task;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_upload_extract_task_result {
 public:

  ExtractorService_upload_extract_task_result() {
  }

  virtual ~ExtractorService_upload_extract_task_result() throw() {}


  bool operator == (const ExtractorService_upload_extract_task_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExtractorService_upload_extract_task_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExtractorService_upload_extract_task_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExtractorService_upload_extract_task_presult {
 public:


  virtual ~ExtractorService_upload_extract_task_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExtractorServiceClient : virtual public ExtractorServiceIf {
 public:
  ExtractorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ExtractorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t load_template(const std::string& url_template, const TemplateType::type template_type);
  void send_load_template(const std::string& url_template, const TemplateType::type template_type);
  int32_t recv_load_template();
  void unload_template(const std::string& url_template, const TemplateType::type template_type);
  void send_unload_template(const std::string& url_template, const TemplateType::type template_type);
  void recv_unload_template();
  void extract_sync(MatchedResultItem& _return, const ExtractItem& extract_item);
  void send_extract_sync(const ExtractItem& extract_item);
  void recv_extract_sync(MatchedResultItem& _return);
  void upload_extract_task(const ExtractItem& extract_task);
  void send_upload_extract_task(const ExtractItem& extract_task);
  void recv_upload_extract_task();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExtractorServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ExtractorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExtractorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_load_template(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unload_template(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_extract_sync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_extract_task(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExtractorServiceProcessor(boost::shared_ptr<ExtractorServiceIf> iface) :
    iface_(iface) {
    processMap_["load_template"] = &ExtractorServiceProcessor::process_load_template;
    processMap_["unload_template"] = &ExtractorServiceProcessor::process_unload_template;
    processMap_["extract_sync"] = &ExtractorServiceProcessor::process_extract_sync;
    processMap_["upload_extract_task"] = &ExtractorServiceProcessor::process_upload_extract_task;
  }

  virtual ~ExtractorServiceProcessor() {}
};

class ExtractorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExtractorServiceProcessorFactory(const ::boost::shared_ptr< ExtractorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ExtractorServiceIfFactory > handlerFactory_;
};

class ExtractorServiceMultiface : virtual public ExtractorServiceIf {
 public:
  ExtractorServiceMultiface(std::vector<boost::shared_ptr<ExtractorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExtractorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ExtractorServiceIf> > ifaces_;
  ExtractorServiceMultiface() {}
  void add(boost::shared_ptr<ExtractorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t load_template(const std::string& url_template, const TemplateType::type template_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_template(url_template, template_type);
    }
    return ifaces_[i]->load_template(url_template, template_type);
  }

  void unload_template(const std::string& url_template, const TemplateType::type template_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unload_template(url_template, template_type);
    }
    ifaces_[i]->unload_template(url_template, template_type);
  }

  void extract_sync(MatchedResultItem& _return, const ExtractItem& extract_item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->extract_sync(_return, extract_item);
    }
    ifaces_[i]->extract_sync(_return, extract_item);
    return;
  }

  void upload_extract_task(const ExtractItem& extract_task) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_extract_task(extract_task);
    }
    ifaces_[i]->upload_extract_task(extract_task);
  }

};



#endif
